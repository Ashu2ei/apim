{
	"info": {
		"_postman_id": "f3605498-5e45-4f1c-8449-d1c94931e3a8",
		"name": "Five Sigma_Professional services",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9809807",
		"_collection_link": "https://red-trinity-123341.postman.co/workspace/grpc~f625f074-0f53-4974-b56b-43f42c5010d0/collection/9809807-f3605498-5e45-4f1c-8449-d1c94931e3a8?action=share&source=collection_link&creator=9809807"
	},
	"item": [
		{
			"name": "Policy API",
			"item": [
				{
					"name": "Validate Policy Objects",
					"item": [
						{
							"name": "Policy Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if((pm.response.code===200)&&((pm.response.json().policies.length)===0))\r",
											"{\r",
											"pm.test(\"Response is 200 OK but policy details are blank\",()=>\r",
											"{ pm.expect.fail(pm.response.code+\" \"+pm.response.status)\r",
											"}\r",
											")}\r",
											"else if((pm.response.code===200)&&((pm.response.json().policies.length)!=0))\r",
											"{   const responseBody = pm.response.json();\r",
											"    const policy_length = responseBody.policies.length;\r",
											"     \r",
											"    \r",
											"    pm.test(\"Response has returned policy details \"+\"  \"+ pm.response.code+\"  \"+pm.response.status,()=>{\r",
											"        pm.expect(pm.response.to.not.be.undefined)\r",
											"    })\r",
											"      \r",
											"\r",
											"    for (let j = 0; j < policy_length; j++) {\r",
											"    \r",
											"    pm.test(\"Validate External_id in Policy can not be blank\", () => {\r",
											"        pm.expect(responseBody.policies[j]).to.have.property('external_id').not.to.be.empty;\r",
											"     })\r",
											"     pm.test(\"Validate arrays in Policy\",()=>{\r",
											"     pm.expect(responseBody).to.have.property('policies').to.be.an('array');\r",
											"    \r",
											"     pm.expect(responseBody.policies[j]).to.have.property('contacts').to.be.an('array');\r",
											"    \r",
											"     pm.expect(responseBody.policies[j]).to.have.property('covered_vehicles').to.be.an('array');\r",
											"     pm.expect(responseBody.policies[j]).to.have.property('drivers').to.be.an('array');\r",
											"     })\r",
											"     \r",
											"     pm.test(\"Validate policy_number in Policy can not be blank\",()=>{\r",
											"     pm.expect(responseBody.policies[j]).to.have.property('policy_number').to.be.a('string').to.not.be.empty;\r",
											"     })\r",
											"    /* pm.test(\"Validate policy number format\",()=>{\r",
											"     pm.expect(responseBody.policies[j].policy_number).to.be.oneOf(['PAI-PAA','MNI-MNA']);\r",
											"     })*/\r",
											"     pm.test(\"Validate version in Policy should be '1' \",()=>{    \r",
											"     pm.expect(responseBody.policies[j]).to.have.property('version').to.be.a('number').to.equal(1);\r",
											"      })\r",
											"     pm.test(\"Validate effective_date date format is yyyy-mm-dd\",()=>{\r",
											"       pm.expect(responseBody.policies[j]).to.have.property('effective_date').to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"     })\r",
											"     pm.test(\"Validate expiration_date date format is yyyy-mm-dd\",()=>{\r",
											"    \r",
											"     pm.expect(responseBody.policies[j]).to.have.property('expiration_date').to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"      })\r",
											"     pm.test(\"Validate policy status is 'Inforce' \",  ()=> {\r",
											"      pm.expect(responseBody.policies[j].policy_status).to.eql(\"Inforce\");\r",
											"      });\r",
											"     pm.test(\"Validate lob in Policy should be auto_policy \",()=>{\r",
											"      pm.expect(responseBody.policies[j]).to.have.property('lob').to.be.a('string').to.equal('auto_policy');\r",
											"      })\r",
											"     pm.test(\"Validate policy_holder_contact_id in Policy can not be blank\",()=>{\r",
											"     pm.expect(responseBody.policies[j]).to.have.property('policy_holder_contact_id').to.be.a('string').not.to.be.empty;\r",
											"      })\r",
											"\r",
											"}\r",
											"}\r",
											"else if((pm.response.code === 400)||(pm.response.code === 401)||(pm.response.code === 403)||(pm.response.code === 404)||(pm.response.code === 405)||(pm.response.code === 500))\r",
											"{\r",
											"    pm.test(\"Validate Error message\",()=>{\r",
											"        const body=pm.response.text()\r",
											"        if(body.includes(\"statusCode\"))\r",
											"        {pm.expect.fail((body))\r",
											"        }\r",
											"        else if(body.includes(\"error\"))\r",
											"        {pm.expect.fail((body))}\r",
											"     \r",
											"})\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://apim-eus-fsps-u-01.azure-api.net/policy/policy_detail?subOrgExternalId=sub_organization_a&search=PAI-PAA-034252&lob=PAUT&dateOfLoss=2024-08-20",
									"protocol": "https",
									"host": [
										"apim-eus-fsps-u-01",
										"azure-api",
										"net"
									],
									"path": [
										"policy",
										"policy_detail"
									],
									"query": [
										{
											"key": "subOrgExternalId",
											"value": "sub_organization_a"
										},
										{
											"key": "search",
											"value": "PAI-PAA-034252"
										},
										{
											"key": "lob",
											"value": "PAUT"
										},
										{
											"key": "dateOfLoss",
											"value": "2024-08-20"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validate Contacts in Policy",
					"item": [
						{
							"name": "Policy Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if((pm.response.code===200)&&((pm.response.json().policies.length)===0))\r",
											"{\r",
											"   pm.test(\"Response is 200 OK but policy details are blank\",()=>\r",
											"{ pm.expect.fail(pm.response.code+\" \"+pm.response.status)\r",
											"}\r",
											"   )}\r",
											"\r",
											"\r",
											"else if((pm.response.code===200)&&((pm.response.json().policies.length)!=0))\r",
											"{\r",
											"const responseBody = pm.response.json();\r",
											"const policy_length = responseBody.policies.length;\r",
											"for (let j = 0; j < policy_length; j++)\r",
											"{   const contacts_length= responseBody.policies[j].contacts.length\r",
											"    console.log(contacts_length);\r",
											"    \r",
											"pm.test(\"Validate Status code is 200 OK\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"for (let k = 0; k < contacts_length; k++)\r",
											"{   const emails_length = responseBody.policies[j].contacts[k].emails.length;\r",
											"    const phones_length=responseBody.policies[j].contacts[k].phones.length;\r",
											"    pm.test(\"Validate emails, phone arrays in 'Contacts' \",()=>{\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property('policies').to.be.an('array');\r",
											"    pm.expect(responseBody.policies[j]).to.have.property('contacts').to.be.an('array');\r",
											"    pm.expect(responseBody.policies[j].contacts[k]).to.have.property('emails').to.be.an('array');\r",
											"    pm.expect(responseBody.policies[j].contacts[k]).to.have.property('phones').to.be.an('array');\r",
											"})\r",
											"    pm.test(\"Validate if contacts.ref_id is not null\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k]).to.have.property('ref_id').to.not.equal(null);//ref_id is mandatory and should not be null;\r",
											"})\r",
											"    pm.test(\"Validate if contacts.role is insured only\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k]).to.have.property('role').to.equal('insured'); //Role is a mandatory field and should be Insured ; \r",
											"});\r",
											"    pm.test(\"Validate if contacts.is_company is boolean\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k]).to.have.property('is_company').to.be.a('boolean').to.be.oneOf([true, false]);\r",
											"});\r",
											"\r",
											"    pm.test(\"Validate if contacts.is_company is true then contacts.company name is not null\",() => {\r",
											"    if(responseBody.policies[j].contacts[k].is_company === true) {\r",
											"        pm.expect(responseBody.policies[j].contacts[k].company_name).to.not.be.empty;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validate if contacts.is_company is false, contacts.First name cannot be blank\",()=>{\r",
											"\r",
											"    if(responseBody.policies[j].contacts[k].is_company === false) {\r",
											"        pm.expect(responseBody.policies[j].contacts[k].first_name).to.not.be.empty;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validate if contacts.is_company is false, contacts.Last name cannot be blank\",()=>{\r",
											"\r",
											"    if(responseBody.policies[j].contacts[k].is_company === false) {\r",
											"        pm.expect(responseBody.policies[j].contacts[k].last_name).to.not.be.empty;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validate contacts.DOB date format is yyyy-mm-dd\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k].date_of_birth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"\r",
											"})\r",
											"pm.test(\"Validate contacts.driving_license_issue_date format is yyyy-mm-dd\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k].driving_license_issue_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"\r",
											"})\r",
											"pm.test(\"Validate contacts.driving_license_number is number\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k]).to.have.property('driving_license_number').to.be.a('string')\r",
											"\r",
											"})\r",
											"for (let p = 0; p < phones_length; p++)\r",
											"{\r",
											"pm.test(\"Validate if contacts.phones.phone_type is mobile, work, home, or fax\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k].phones[p]).to.have.property('phone_type').to.be.a('string').to.be.oneOf(['mobile', 'work', 'home', 'fax']);\r",
											"});\r",
											"pm.test(\"Validate if contacts.phones.phone_number is not blank\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k].phones[p].phone_number).to.not.be.empty;\r",
											"});\r",
											"}\r",
											"for (let e = 0; e < emails_length; e++)\r",
											"{\r",
											"pm.test(\"Validate if contacts.emails.email_address is not blank\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k].emails[e].email_address).to.not.be.empty;\r",
											"});\r",
											"pm.test(\"Validate contacts.emails.email_address format\",()=>{\r",
											"\r",
											"    pm.expect(responseBody.policies[j].contacts[k].emails[e].email_address).to.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\r",
											"\r",
											"})\r",
											"}}}}\r",
											"\r",
											"else if((pm.response.code === 400)||(pm.response.code === 401)||(pm.response.code === 403)||(pm.response.code === 404)||(pm.response.code === 405)||(pm.response.code === 500))\r",
											"{\r",
											"    pm.test(\"Validate Error message\",()=>{\r",
											"        const body=pm.response.text()\r",
											"        if(body.includes(\"statusCode\"))\r",
											"        {pm.expect.fail((body))\r",
											"        }\r",
											"        else if(body.includes(\"error\"))\r",
											"        {pm.expect.fail((body))}\r",
											"     \r",
											"})\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://apim-eus-fsps-u-01.azure-api.net/policy/policy_detail?search=PAI-PAA-034252&lob=PAUT&dateOfLoss=2024-08-02",
									"protocol": "https",
									"host": [
										"apim-eus-fsps-u-01",
										"azure-api",
										"net"
									],
									"path": [
										"policy",
										"policy_detail"
									],
									"query": [
										{
											"key": "subOrgExternalId",
											"value": "sub_organization_a",
											"disabled": true
										},
										{
											"key": "search",
											"value": "PAI-PAA-034252"
										},
										{
											"key": "lob",
											"value": "PAUT"
										},
										{
											"key": "dateOfLoss",
											"value": "2024-08-02"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validate Coverages",
					"item": [
						{
							"name": "Policy Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if((pm.response.code===200)&&((pm.response.json().policies.length)===0))\r",
											"{\r",
											"   pm.test(\"Response is 200 OK but policy details are blank\",()=>\r",
											"{ pm.expect.fail(pm.response.code+\" \"+pm.response.status)\r",
											"}\r",
											"   )}\r",
											"else if((pm.response.code===200)&&((pm.response.json().policies.length)!=0))\r",
											"\r",
											"{\r",
											"const responseBody = pm.response.json();\r",
											"const policy_length = responseBody.policies.length;\r",
											"console.log(\"Policy length is \",policy_length)\r",
											"for (let a = 0; a < policy_length; a++) {\r",
											"    covered_vehicles_length = responseBody.policies[a].covered_vehicles.length\r",
											" for(let cv=0;cv<covered_vehicles_length;cv++)\r",
											"    {\r",
											"   // console.log(\"covered_vehicles_length is\", covered_vehicles_length)\r",
											"    const coverages_length = responseBody.policies[a].covered_vehicles[cv].coverage_object.coverages.length;\r",
											"    console.log(\"Coverages under coverage object are\",coverages_length)\r",
											"    for (let cv_l = 0; cv_l < coverages_length; cv_l++){\r",
											"        const c=responseBody.policies[a].covered_vehicles[cv].coverage_object.coverages[cv_l];\r",
											"\r",
											"    pm.test(\"Validate coverage_key property in each coverage\", +\"covered_vehicles\"+cv+\"coverages\"+cv_l+function () {\r",
											"        \r",
											"            pm.expect(c).to.have.property('coverage_key').to.be.oneOf(['auto_bi_others', 'auto_pip', 'auto_bi_uninsured', 'auto_damage_tp', 'auto_optional_bi_others', 'auto_med_pay', 'auto_uninsured_bi']);\r",
											"        });\r",
											"        pm.test(\"Validate deductible properties in each coverage\",function () {\r",
											"        \r",
											"            pm.expect(c).to.have.property('deductible');        \r",
											"        });\r",
											"   \r",
											"     pm.test(\"Validate is_covered properties in each coverage\", function () {\r",
											"        \r",
											"        pm.expect(c).to.have.property('is_covered').to.equal(true);\r",
											"     }\r",
											"        );\r",
											"  \r",
											"     pm.test(\"Validate limit_per_incident properties in each coverage\", function () {\r",
											"        //coverages.forEach((k) => \r",
											"        \r",
											"                      pm.expect(c).to.have.property('limit_per_incident');      \r",
											"        \r",
											"    });\r",
											"    \r",
											"    pm.test(\"Validate limit_per_person properties in each coverage\", function () {\r",
											"         \r",
											"                   \r",
											"                      pm.expect(c).to.have.property('limit_per_person').to.be.a('number');}    \r",
											"                      \r",
											"        );\r",
											" \r",
											"    }\r",
											"}}}\r",
											"else if((pm.response.code === 400)||(pm.response.code === 401)||(pm.response.code === 403)||(pm.response.code === 404)||(pm.response.code === 405)||(pm.response.code === 500))\r",
											"{ \r",
											"pm.test(\"Error in policy API response\",()=>{\r",
											"  pm.expect.fail(pm.response.code+\" \"+pm.response.status)\r",
											"}\r",
											")}\r",
											"\r",
											"else if((pm.response.code === 400)||(pm.response.code === 401)||(pm.response.code === 403)||(pm.response.code === 404)||(pm.response.code === 405)||(pm.response.code === 500))\r",
											"{\r",
											"    pm.test(\"Validate Error message\",()=>{\r",
											"        const body=pm.response.text()\r",
											"        if(body.includes(\"statusCode\"))\r",
											"        {pm.expect.fail((body))\r",
											"        }\r",
											"        else if(body.includes(\"error\"))\r",
											"        {pm.expect.fail((body))}\r",
											"     \r",
											"})\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://apim-eus-fsps-u-01.azure-api.net/policy/policy_detail?subOrgExternalId=sub_organization_a&search=PAI-PAA-028506&lob=PAUT&dateOfLoss=2024-08-20",
									"protocol": "https",
									"host": [
										"apim-eus-fsps-u-01",
										"azure-api",
										"net"
									],
									"path": [
										"policy",
										"policy_detail"
									],
									"query": [
										{
											"key": "subOrgExternalId",
											"value": "sub_organization_a"
										},
										{
											"key": "search",
											"value": "PAI-PAA-028506"
										},
										{
											"key": "lob",
											"value": "PAUT"
										},
										{
											"key": "dateOfLoss",
											"value": "2024-08-20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const responseBody = pm.response.json();\r",
											"const policy_length = responseBody.policies.length;\r",
											"console.log('Policy length is',policy_length)\r",
											"for (let a = 0; a < policy_length; a++) {\r",
											"    covered_vehicles_length = responseBody.policies[a].covered_vehicles.length\r",
											"    console.log(\"covered vehicles in 1 policy are\",covered_vehicles_length)\r",
											"    for(let cv=0;cv<covered_vehicles_length;cv++)\r",
											"    {\r",
											"   // console.log(\"covered_vehicles_length is\", covered_vehicles_length)\r",
											"    const coverages_length = responseBody.policies[a].covered_vehicles[cv].coverage_object.coverages.length;\r",
											"    console.log(\"Coverages under coverage object are\",coverages_length)\r",
											"    for (let cv_l = 0; cv_l < coverages_length; cv_l++){\r",
											"        const c=responseBody.policies[a].covered_vehicles[cv].coverage_object.coverages[cv_l];\r",
											"\r",
											"    pm.test(\"Validate coverage_key property in each coverage\", +\"covered_vehicles\"+cv+\"coverages\"+cv_l+function () {\r",
											"        \r",
											"            pm.expect(c).to.have.property('coverage_key').to.be.oneOf(['auto_bi_others', 'auto_pip', 'auto_bi_uninsured', 'auto_damage_tp', 'auto_optional_bi_others', 'auto_med_pay', 'auto_uninsured_bi']);\r",
											"        });\r",
											"        pm.test(\"Validate deductible properties in each coverage\",function () {\r",
											"        \r",
											"            pm.expect(c).to.have.property('deductible');        \r",
											"        });\r",
											"   \r",
											"     pm.test(\"Validate is_covered properties in each coverage\", function () {\r",
											"        \r",
											"        pm.expect(c).to.have.property('is_covered').to.equal(true);\r",
											"     }\r",
											"        );\r",
											"  \r",
											"     pm.test(\"Validate limit_per_incident properties in each coverage\", function () {\r",
											"        //coverages.forEach((k) => \r",
											"        \r",
											"                      pm.expect(c).to.have.property('limit_per_incident');      \r",
											"        \r",
											"    });\r",
											"    \r",
											"    pm.test(\"Validate limit_per_person properties in each coverage\", function () {\r",
											"         \r",
											"                   \r",
											"                      pm.expect(c).to.have.property('limit_per_person').to.be.a('number');}    \r",
											"                      \r",
											"        );\r",
											" \r",
											"   \r",
											"}}}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://apim-eus-fsps-u-01.azure-api.net/policy/policy_detail?subOrgExternalId=sub_organization_a&search=PAI-PAA-028506&lob=PAUT&dateOfLoss=2024-08-20",
									"protocol": "https",
									"host": [
										"apim-eus-fsps-u-01",
										"azure-api",
										"net"
									],
									"path": [
										"policy",
										"policy_detail"
									],
									"query": [
										{
											"key": "subOrgExternalId",
											"value": "sub_organization_a"
										},
										{
											"key": "search",
											"value": "PAI-PAA-028506"
										},
										{
											"key": "lob",
											"value": "PAUT"
										},
										{
											"key": "dateOfLoss",
											"value": "2024-08-20"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Key",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "545c70d0-d5da-4964-8ae6-aa8577d0dd56"
		},
		{
			"key": "url",
			"value": "https://apim-eus-fsps-u-01.azure-api.net/policy/policy_detail?subOrgExternalId=sub_organization_a&search=PAI-PAA-034252&lob=PAUT&dateOfLoss=2024-08-20",
			"type": "string"
		}
	]
}